1. Intro to HTML
https://drive.google.com/file/d/1Bx5cgjrAQ2KJddNXNEhoG6TKJUTVx8rp/view?ts=63d0f48b
https://slides.com/jmsherry/further-html?token=883O31cp#/0/14

2. Furthur HTML and Tables and Froms
https://drive.google.com/file/d/1Y3rz1IpCcV8Z9Wi-qu-XrRL8t2D5clk-/view?ts=63d302a8
https://slides.com/jmsherry/tables-and-forms#/0/6

3.Forms and Images and Video and Audio.mp4
https://drive.google.com/file/d/1XRklayVTRivbMNhwVhet40R1DTlV5Jec/view?ts=63d9b0b6
https://slides.com/jmsherry/html5-audio-video-and-images?token=SQs1hWc3


4. CSS Selectors.
https://drive.google.com/file/d/1JD5SFy_ZFJXnMoRHcrnLrQWdv94f_UMI/view?ts=63dc3009
https://slides.com/jmsherry/css-intro-selectors

Tasks
https://flukeout.github.io/#

5. CSS Declarations
https://drive.google.com/file/d/1ztZ8LeTuBp6tY0utu70QovCTgmQorE2Y/view?ts=63e2cf07
https://slides.com/jmsherry/css-declarations#/0/7
https://slides.com/jmsherry/introduction-to-layout#/0/15

6. Layout Intro
https://slides.com/jmsherry/fonts?token=OREgFBtD
https://drive.google.com/file/d/1eRe4P7ioG-36qMKTyLCcQX86M39bGsHg/view?ts=63e573f8

7.  Flex
https://slides.com/jmsherry/flexbox
https://drive.google.com/file/d/1VoERweoiAT7Yoy3lJUOCmENUU5Lrcn0d/view?ts=63ec0039

Errors in code
- Check the square brackets 
- Run with a validator  = online
- Check DOM Errors

CSS rules 
browser can igonore rules older browser 
css will only apply rules on the mostly used and ignore one 
some rules can be completely ignored
e.g.
display: inline-block
display: flex

vendor prefixes - not widely used = can be used at some places
-way for browser makers to add support for new CSS features before those features are fully supported in all browsers.
-used for compactibilty 
-use autoprefixer to  write the code
https://autoprefixer.github.io/

flexbox
div class - "flex container" = PARENT
major css rules applies to children

MAKE SURE FLEX IS TURNED ON BEFORE WORKING 

flex container children
css rules apples to ALL
div class 1
div class 2
div class 3
div class 4
div class 5

The Flexible Box Layout Module, makes it easier to design flexible responsive layout structure without using float or positioning
-one-dimentional = allows element to auto-distribute space
-fix probelms with height, vertical cntering
-can be used for nav bar and menu
-used to put things next to each other
https://www.w3schools.com/css/css3_flexbox_container.asp#flex-direction


grid 2 dinetional 
grid x 2 types = flexbox or grid built insed the browser

flex uses container 
html div - class = flex-container = PARENT OF THE DIVS
css style = .flex-container
display = flex
div 1,2,3 will have class one, two, three = children of the container

div > div = this is direct div and not to affect children
width
height
color

children (1,2,3) different color

flex uses one rules to do different things 
flex rules
-background color - Red
-display - flex
-justify contect - center

<style>
.flex-container {
  display: flex;
  background-color: DodgerBlue;
}

.flex-container > div {
  background-color: #f1f1f1;
  margin: 10px;
  padding: 20px;
  font-size: 30px;
}
</style>

The flex container properties are:

flex-direction 
= row-reverse (left to right flipping orders )
flex-direction 
= column-reverse (sitting on top each other)

flex-wrap
The flex-wrap property specifies whether the flex items should wrap or not.
-wraps around each other horizontally when there is not enough space.
-wraps levages one direction to another wrap

flex-flow
The flex-flow property is a shorthand property for setting both the flex-direction and flex-wrap properties.

.flex-container {
  display: flex;
  flex-flow: row wrap or reverse;
}


align-items - main axis and cross axis 
The center value aligns the flex items in the middle of the container:
.flex-container {
  display: flex;
  height: 200px;
  align-items: center;
  align-items: flex-end;
  justify-content - center 
}

CSS gap Property
Set the gap between rows and between columns to 50px:
.flex-container {
  gap: 50px;
  column-gap: 50px;
}
https://www.w3schools.com/cssref/css3_pr_gap.php


align-content
The align-content property is used to align the flex lines.
.flex-container {
  display: flex;
  height: 600px;
  flex-wrap: wrap;
  align-content: space-between;
  justify-content:center;
}

justify-content
Align the flex items at the center of the container:
https://www.w3schools.com/cssref/css3_pr_justify-content.php

 
CSS Flex Items
RULES OF THE CONTAINER APPLIES TO PARENT
RULES OF THE ITEMS APPLIES TO Child

Child Elements (Items)
The direct child elements of a flex container automatically becomes flexible (flex) items.

<div class="flex-container">
  <div>1</div>
  <div>2</div>
  <div>3</div>
  <div>4</div>
</div>



The flex item properties are:
order
flex-grow
flex-shrink
flex-basis
flex
align-self

order = changes things individuallly and set any order we want
<div class="flex-container">
  <div style="order: 3">1</div>
  <div style="order: 2">2</div>
  <div style="order: 4">3</div>
  <div style="order: 1">4</div>
</div>
class order numbers matters and not the values on div:1

The flex-grow Property
The flex-grow property specifies how much a flex item will grow relative to the rest of the flex items.
<div class="flex-container">
  <div style="flex-grow: 1">1</div>
  <div style="flex-grow: 1">2</div>
  <div style="flex-grow: 8">3</div>
</div>

The flex-shrink Property
The flex-shrink property specifies how much a flex item will shrink relative to the rest of the flex items.
<div class="flex-container">
  <div>1</div>
  <div>2</div>
  <div style="flex-shrink: 0">3</div>
  <div>4</div>
  <div>5</div>
  <div>6</div>
  <div>7</div>
  <div>8</div>
  <div>9</div>
  <div>10</div>
</div>

FLEX GROW AND SHRINK CAN BE DONE WITH SHORT HAND (ALL IN ONE)


The flex-basis Property
The flex-basis property specifies the initial length of a flex item.
<div class="flex-container">
  <div>1</div>
  <div>2</div>
  <div style="flex-basis: 200px">3</div>
  <div>4</div>
</div>


FLEX IMAGES AND CONTENT IN A FLEX CONTAINER - BEST PRACTICE
<!DOCTYPE html>
<html>
<head>
<style>
.flex-container {
  display: flex;
  background-color: #f1f1f1;
}

.flex-container > div {
  background-color: DodgerBlue;
  color: white;
  width: 100px;
  margin: 10px;
  text-align: center;
  line-height: 75px;
  font-size: 30px;
}
</style>

</head>
<body>

<div class="flex-container">
<div class="one"><a href="http://">Hello</a><div>
<div class="two"><img src=""alt=""/a><div>
<div class="three"><p>Hello</p><div>
  
</div>

<p>All direct children of a flexible container becomes flexible items.</p>

</body>
</html>


Nested Flex Containers with Flexbox is allowed 
https://www.quackit.com/css/flexbox/tutorial/nested_flex_containers.cfm

https://css-tricks.com/snippets/css/a-guide-to-flexbox/
https://www.theodinproject.com/lessons/intermediate-html-and-css-using-flexbox-and-grid





8. media-queries
https://slides.com/jmsherry/media-queries
https://drive.google.com/file/d/18Hd93Yt5K4bP6dZKZFn9m9iPeYwquvP4/view?ts=63eeb739

media-queries

media queries are a popular technique for delivering a tailored style sheet to different devices. 
To demonstrate a simple example, we can change the background color for different devices.

media queries rules = start with mobiles first

conditional css 

process 

- set up link stylesheet
- set up media 

media query target types that can used:
all = rules applies 
screen = on screen
print = printing docs -banks, boarding pass
aural = voice - deprecated
braile = blind readers
handheld = devices pda's 
projection = deprecated 
embossed = blind readers
tty 
tv 


media query can target capabilities of devices at the moment in time
screens minimum width should be 500px or more = vertical/horizontal 

media features
user-preferences - some users might prefer dark/light mode 
= set rules according to prefrences 
accesscibilty prefrence = animation or not - turn animation off or on on the OS

Using media queries
https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries

media queries = responsiveness
min and max is utilised for responsiveness
always start with min width
use max width less often


breakpoints = choose the minimum devices that you want to support.
phone = <600px
desktop = > 1200px

every comapny use different breakpoints


There are tons of screens and devices with different heights and widths, 
so it is hard to create an exact breakpoint for each device. 

To keep things simple you could target five common groups:

Example
/* Extra small devices (phones, 600px and down) */
@media only screen and (max-width: 600px) {...}

/* Small devices (portrait tablets and large phones, 600px and up) */
@media only screen and (min-width: 600px) {...}


/* targeting printer */
@media print (min-width: 500px) {
  body {
    background-color: lightgreen;
  }

/* targeting screen */
@media print (min-width: 500px) {
  body {
    background-color: lightgreen;
  }

/* target multiple devices
@media screen, print {

} */

/* Target min and max best practice */

/* target min
@media (min-width: 500px) {
  .container {
  padding: 20px;
  background-color: red;
  }
} */

/* target max
@media (min-width: 700px) {
  .container {
  padding: 70px;
  background-color: blue;
  }
} */

scripting
The scripting CSS media feature can be used to test whether scripting (such as JavaScript) is available.
https://developer.mozilla.org/en-US/docs/Web/CSS/@media/scripting



pre built grid system - depending the requirements

Bootstrap includes six default breakpoints, sometimes referred to as grid tiers, for building responsively. 
These breakpoints can be customized if youâ€™re using our source Sass files.
https://getbootstrap.com/docs/5.0/layout/breakpoints/




9. Four card feature - FIGMA
https://slides.com/jmsherry/svg?token=GZzdx--B
https://drive.google.com/file/d/1VrHjm8_PUQ7AyWo8KkARB7gKZa1d59au/view?ts=63f5e775

FIGMA
Figma is a powerful web-based design tool that helps you create anything, websites, applications, logos, and much more. 
You'll take your first steps into User Interface Design and User Experience Design by learning how to use Figma.

Web development - specifitcation files 

https://www.figma.com/

HTML
First = mark up HTML 



10. SVG
https://slides.com/jmsherry/svg?token=GZzdx--B#/0/4
https://drive.google.com/file/d/1o6T94jZUzTMJd52uPSRspsfGGKIEVy4F/view?ts=63f7dca4

SVG stands for Scalable Vector Graphics.
SVG defines vector-based graphics in XML format.

SVG images can be created with any text editor, 
but it is often more convenient to create SVG images with a drawing program

canvas alternative to SVG 
canvas cannnot be changed 
SVG's can be modified 
SVG's resolution depenedent 
SVG's have API 
SVG's can be embeded on html5
SVG's is used as an object 
SVG's can useed as iframe (webpage into webpage)
SVG's can be used as image tags (not accesscibilty)
viewbox in SVG's 
sizing = SVG
viewbox = SVG
Aspect ratio = SVG 
path = SVG 
shapes you can draw with SVG's
SVG INSIDE SVG 
Polyline and polygons are different
SVG visualiser 
external images = SVG 
grouping elements = SVG 
re-use = SGV using - (defs) tags - 


<svg viewBox="0 0 220 100" xmlns="http://www.w3.org/2000/svg">
  <!-- Simple rectangle -->
  <rect width="100" height="100" />

  <!-- Rounded corner rectangle -->
  <rect x="120" width="100" height="100" rx="15" />
</svg>


https://developer.mozilla.org/en-US/docs/Web/SVG/Element/rect

https://thenounproject.com/icons/

Burger Menu 

When working with burger menu = thing to turn ON and OFF SHOULD BE THE SUB MENU
You can use HTML and CSS including Javascript to manipulate burger menu.
Sub menu should be a child of clickable items

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" href="styles.css" />
  </head>
  <body>
    <div>
      <div class="burger-container" tabindex="0">
      <div class="line"></div>
      <div class="line"></div>
      <div class="line"></div>
      <div class="sub-menu">
        <div>menu item 1</div>
        <div>menu item 2</div>
        <div>menu item 3</div>
        <div>menu item 4</div>
      </div>
    </div>
    <div class="for-demo">For Demo Only</div>
  </body>
</html



CSS CODE 

.line {
  background-color: black;
  width: 20px;
  height: 2px;
  margin-bottom: 2px;
}
.sub-menu {
  display: none;
}
.burger-container:hover .sub-menu,
.burger-container:focus-within .sub-menu {
  display: initial;
}
.for-demo{
  background-color: brown;
}



Multiple Levels of Burger Menu
- Always use NAV BAR to address your CSS RULES FOR UL AND LI
- HOME AND PRODUCTS ARE THE MAIN MENU








11. Advance CSS
https://slides.com/jmsherry/advanced-css3
https://drive.google.com/file/d/1c1mA0PaBBVe7RfdoyFVtaZu0JFGHEzXc/view?ts=63fe8c93

Shadows 
- text shadows 
Border radius
Background enhancements - multiple background 
Background attachement - scroll and locale
Background attachement - repeat + round
Background attachement - clip
Background attachement - origin
Background attachement - linear gradient 

Gradient Background - background from one color to another color 

Color stop syntax - List 

Transforms -  moving something
-scale up and down 
- skew 
- rotate

Transition - Transform and ease-i-out

Animation 
@keyframe demo1
tranform/scale
What can you animate?

12. Grid
Grid can use flex
Grid lines = 
Track gap between grid lines
Grid area - chunks of grid area
Grid needs a container
Divs are items inside a grid
Grid auto inserted
More controls 
Auto in CSS grids - expans to fill spaces - auto makes it own choice
Auto can shrink 
Explicit grid and implicit grids
Unit = fr 1 or greater e.g 1fr 2fr
Add media query to your grid
Grid min and max content 
max makes row and counm as wide as it work
Grid gap creates spaces in between grids
GAP is better than Margin
Auto fit and auto fill = to fill in as many items you can fit 
Implicit grid - stay clear 



https://grid.malven.co/












